@model IEnumerable<FoodieProject.Models.Address>

@{
    ViewData["Title"] = "Index";
}


<h1 class="title_font text_shadow">Addresses</h1>

@*<div class="col-5">
        <button type="button" class="btn btn-light float-right switch_button" id="priceSwitchButton">
            Mode <span class="badge badge-dark" id="modeIndicator">Table</span>
        </button>
    </div>*@

<p>
    <a class="text-light text_shadow" asp-action="Create">Create New</a>
</p>
<button type="button" class="btn btn-light" id="priceSwitchButton">
    Mode <span class="badge badge-dark" id="modeIndicator">Table</span>
</button>

<form asp-action="Search" id="SearchAjaxForm" class="float-md-right">
    <div class="d-flex align-items-center small non_display" id="searchBox">
        <i class="fa fa-search fa-fw text-muted position-absolute pl-3" id="icon"></i>
        <input name="query" id="query" type="search" class="form-control rounded form-control-login search_box" placeholder="Ender address to search" aria-label="Search"
               aria-describedby="search-addon" size="24" />
    </div>
</form>
<br />
<br />
<table class="table text-light table-striped" id="AddressTable">
    <thead class="thead-light">
        <tr>
            <th>@Html.DisplayNameFor(model => model.City)</th>
            <th>@Html.DisplayNameFor(model => model.Street)</th>
            <th>@Html.DisplayNameFor(model => model.Number)</th>
            <th>@Html.DisplayNameFor(model => model.Restaurant.Name)</th>
            <th></th>

        </tr>
    </thead>
    <tbody class="text_shadow">
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.City)</td>
                <td>@Html.DisplayFor(modelItem => item.Street)</td>
                <td>@Html.DisplayFor(modelItem => item.Number)</td>
                <td>@Html.DisplayFor(modelItem => item.Restaurant.Name)</td>

                <td class="edit_delete_details">
                    <a class="edit_delete_details" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a class="edit_delete_details" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a class="edit_delete_details" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="Area" class="text-center non_display" width="400px" heigth="460px"></div>

<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
    var elements = [];
    var table = document.getElementById('AddressTable');

    for (var i = 1; i < table.rows.length; i++) {
        var currCity = table.rows[i].cells[0].innerHTML;
        var flag = false;
        var pos = -1;


        // Check if the city is already exists in the element object
        for (var j = 0; j < elements.length; j++) {
            if (elements[j].name == currCity && flag == false) {
                pos = j;
                flag = true;
            }
        }

        if (pos != -1) {
            elements[pos].value++
        }
        else {
            elements.push({ "name": table.rows[i].cells[0].innerHTML, "value": 1 });
        }
    }

    // Get maximum and minumum value
    var min = 999
    var max = 0
    for (var i = 0; i < elements.length; i++) {
        if (parseInt(elements[i].value) > parseInt(max)) { max = parseInt(elements[i].value); }
        if (parseInt(elements[i].value) < parseInt(min)) { min = parseInt(elements[i].value); }
    }

    // set the dimensions and margins of the graph
    var margin = { top: 30, right: 30, bottom: 70, left: 60 },
        width = 600 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;


    // append the svg object to the body of the page
    var svg = d3.select("#Area")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .call(responsivefy)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    function responsivefy(svg) {
        // get container + svg aspect ratio
        var container = d3.select(svg.node().parentNode),
            width = parseInt(svg.style("width")),
            height = parseInt(svg.style("height")),
            aspect = width / height;

        // add viewBox and preserveAspectRatio properties,
        // and call resize so that svg resizes on inital page load
        svg.attr("viewBox", "0 0 " + width + " " + height)
            .attr("preserveAspectRatio", "xMinYMid")
            .call(resize);

        // to register multiple listeners for same event type,
        // you need to add namespace, i.e., 'click.foo'
        // necessary if you call invoke this function for multiple svgs
        // api docs: https://github.com/mbostock/d3/wiki/Selections#on
        d3.select(window).on("resize." + container.attr("id"), resize);

        // get width of container and resize svg to fit it
        function resize() {
            var targetWidth = parseInt(container.style("width"));
            if (targetWidth < 700) {
                svg.attr("width", targetWidth);
                svg.attr("height", Math.round(targetWidth / aspect));
            }
        }

    }
    // Parse the Data

    function build(data) {

        // X axis
        var x = d3.scaleBand()
            .range([0, width])
            .domain(data.map(function (d) { return d.name; }))
            .padding(0.2);
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");

        // Add Y axis
        var y = d3.scaleLinear()
            .domain([0, max * 1.2])
            .range([height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));

        // Bars
        svg.selectAll("mybar")
            .data(data)
            .enter()
            .append("rect")
            .attr("x", function (d) { return x(d.name); })
            .attr("y", function (d) { return y(d.value); })
            .attr("width", x.bandwidth())
            .attr("height", function (d) { return height - y(d.value); })
            .attr("fill", "#F5F3F0")

    }
    build(elements);
</script>

@section Scripts {
    <script type="text/html" id="hidden-template">
        <tr>
            <td>{city}</td>
            <td>{street}</td>
            <td>{number}</td>
            <td>{restName}</td>
          

            <td class="edit_delete_details">
                <a class="edit_delete_details" href="/Addresses/Edit/{id}">Edit</a> |
                <a class="edit_delete_details" href="/Addresses/Details/{id}">Details</a> |
                <a class="edit_delete_details" href="/Addresses/Delete/{id}">Delete</a>
            </td>
        </tr>
    </script>
}